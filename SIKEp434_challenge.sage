import public_values_aux
from public_values_aux import *
import hashlib

set_verbose(-1)
load('castryck_decru_shortcut.sage')
load('sandwich_attack.sage')

SIKE_parameters = {
    "SIKEp434" : (216, 137),
    "SIKEp503" : (250, 159),
    "SIKEp610" : (305, 192),
    "SIKEp751" : (372, 239),
    "SIKEp964" : (486, 301), # removed after NIST round 1
}

# Change me to attack different parameter sets
NIST_submission = "SIKEp434"
a, b = SIKE_parameters[NIST_submission]

print(f"Running the attack against {NIST_submission} parameters, which has a prime: 2^{a}*3^{b} - 1")

print(f"Generating public data for the attack...")
# Set the prime, finite fields and starting curve
# with known endomorphism
p = 2^a*3^b - 1
public_values_aux.p = p

Fp2.<i> = GF(p^2, modulus=x^2+1)
assert i^2 == -1
R.<x> = PolynomialRing(Fp2)

E_start = EllipticCurve(Fp2, [0,6,0,1,0])
E_start.set_order((p+1)^2, num_checks=0) # Speeds things up in Sage

# Generation of the endomorphism 2i
two_i = generate_distortion_map(E_start)

# $IKEp217 public parameters

xQ2 = 8633131302536015373065425580178973814526244742660764898957635611033517358603093513483897324469034427019598357249425684820405193836 + i*1640555213321637736080614728970921962714590288563692816952785470842808462670732196555713644986698688787353020078064569199240185333
yQ2 = 20276452752220665548202189403598170750834982427130760850813254160550305310659929663123304778814287531500756146204805251963783256037 + i*10045306525245350298803819046509877432229480969314772374869175643233206473596453796721101344057683381390923103776706006170651177942
Q2 = E_start(xQ2, yQ2)

xP2 = 2634539327592482918121599540115765431217195093350648632832477775508933673747596362667240890051240463853167541162279343167040310088 + i*18590308952679468489364793668589003541299106140709579196186461020066893645141198854487503147226318730158493210982567772716162869840
yP2 = 18499992072774772182750461054948965122862326576938683155863157755664308576685791546530637605543615310883354355922717114976263189216 + i*10983718925653566249610333622918370357192097441961014913751641775508865561311331364566791542776619041356373750734992554370506677551
P2 = E_start(xP2, yP2)

# # CONSISTENCY WITH R (NOT NEEDED BUT OK)
# XR2 = 10548244869191429978994573331033429460802791853191679921432716242390096998215982561051229194803656270150791181542353263212179039510 + i*17623338845092751517427595119320347017334966146230013113905734683582704966390296970846105400364294574370981828797535336936167097772
# assert (P2 - Q2)[0] == xR2

xQ3 = 13106015910647201458426811493288965923311702902321179794984306791335898269651901670809619116119997952683697617529379507339288983622 + i*0
yQ3 = 0 + i*10209775938515962501771741506081580425243588708606392462054462399651871393790372518908435424495021346995173633235373991504988757970
Q3 = E_start(xQ3, yQ3)

xP3 = 5822289030790821842647204127346110197186614331916510409554480418611145246532692679762948023941031185216358707524703325193156147113 + i*0
yP3 = 4631002038627486062145710538859886699092897850004224163519174820337269208909673679867855016325656365561668068341925816094377133115 + i*0
P3 = E_start(xP3, yP3)

# # CONSISTENCY WITH R (NOT NEEDED BUT OK)
# # Typo in magma, should be P3 and Q3
# xR3 = 19978714732817982296321998790126652405475699311529669091328949981490769847281914491438519436155586335833863255694913096932863948652 + i*14167827257511306746606440016400170231086622175754382579855491498256779752299521404090563911050166061448571907478184141518856743652
# assert (P3 - Q3)[0] == xR3

# Curve isogeny system "SIDHp434". Base curve: Montgomery curve By^2 = Cx^3 + Ax^2 + Cx defined over GF(p434^2), where A=6, B=1, C=1 and p434 = 2^216*3^137-1

# BOB'S PUBLIC KEY:
xPB = 16747725342245350742330010383148817198049690456991656286540775457027209163684554069016869663321070867631626861008363117939918095860 + i*1143541092502963401833180824688416568580765293349981661192522553997303040365105551278280459359267157666084258709519189576118930614
xQB = 250934681849114059295369432986570157187294713034152989097067950301357785155894408494037140016943078791080453674075900327913913886 + i*848508102181049643987966822585402351691494690915996631792322711239416245860379592282733142577314124640879163335993219547568302310
xRB = 5386615605242137026190878831238997774586217112697325388805430180308785539309515215947349924889866387572952601144096790641031020849 + i*16908696711553728116078775928446359012331932889601853188014379247226310055326599082751962005687743927743207328087857939123636357314

#xPB = 10289739760907108938945779768314748276903530393674047725678600331074874622432285814422891200592179402842751734628699936265899006734 + i * 163238853386791146257956156952478659006296082002966610916244777216829564267244505810771579798614693739333716741424856457244013321
#xQB = 985980144435754179341257184835243040172929292396249452308108905199931621627121116142920474652018170323548459302100285412350175928 + i * 5998507178978652944876722804615334914708599187767552560010435959812922526436994839352697505886302923029843038311673550517650939201
#xRB = 5524491698523215815383547462990148917379406824209851411990482698392144482000386165941423933016809423520042352957892803932652358238 + i * 18876394758189399901102806543655722761658385062926315044155012031517855204342746364663750633456874825760781572805795977986030724818

B = (1 - xPB*xQB - xPB*xRB - xQB*xRB)^2/(4*xPB*xQB*xRB) - xPB - xQB - xRB

yPB = sqrt(xPB^3 + B*xPB^2 + xPB)

yQB = sqrt(xQB^3 + B*xQB^2 + xQB)

# SMALL ERROR IN SIDH-spec.pdf, CORRECTED HERE
if xRB + xQB + xPB + B != (yQB + yPB)^2 / (xQB - xPB)^2:
    yQB = -yQB

# let's check:
EB = EllipticCurve(Fp2, [0,B,0,1,0])
EB.set_order((p+1)^2, num_checks=0) # Speeds things up in Sage

PB = EB(xPB, yPB)
QB = EB(xQB, yQB)

# ===================================
# =====  ATTACK  ====================
# ===================================

def RunAttack(num_cores):
    return CastryckDecruAttack(E_start, P2, Q2, EB, PB, QB, two_i, num_cores=num_cores)

if __name__ == '__main__' and '__file__' in globals():
    if '--parallel' in sys.argv:
        # Set number of cores for parallel computation
        num_cores = os.cpu_count()
        print(f"Performing the attack in parallel using {num_cores} cores")
    else:
        num_cores = 1

    if '--sandwich' in sys.argv:
        # Use the fact that 2^(a-1) - 5*3^b is a sum of squares
        assert two_squares(2^(a-1) - 5*3^b)
        recovered_key = SandwichAttack(E_start, P2, Q2, EB, PB, QB, two_i, k=5, alp=1)
    else:
        out_Bob = RunAttack(num_cores)
        out_Bob = hashlib.sha3_512(str(out_Bob).encode())
        print("\nSHA3-512 hash of Bob's shared secret - SHA3-512:\n")
        print(out_Bob.hexdigest())

